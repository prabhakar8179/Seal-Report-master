<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><CurrentViewGUID>838b9ce2-7276-4af0-b250-d336eceaada0</CurrentViewGUID><GUID>57ce0ee5-6cb4-4ce0-94c8-607fe37d6afb</GUID><ViewGUID>838b9ce2-7276-4af0-b250-d336eceaada0</ViewGUID><InputValues><ReportRestriction><GUID>9082adcd-11bd-43fc-b3c6-4dd9269566a1</GUID><Type>Text</Type><DisplayName>Repository Source Folders</DisplayName><EnumGUID>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUIDEL><Prompt>Prompt</Prompt><OperatorStyle>NotModifiable</OperatorStyle><TypeRe>Text</TypeRe><EnumGUIDRE>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</EnumGUIDRE></ReportRestriction><ReportRestriction><GUID>b99502a2-139f-4f3a-adb7-97750c3357d0</GUID><Type>Text</Type><DisplayName>Copy Sub-Folders</DisplayName><DisplayOrder>2</DisplayOrder><EnumGUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDEL><Prompt>PromptOneValue</Prompt><OperatorStyle>NotModifiable</OperatorStyle><DisplayOrderRE>2</DisplayOrderRE><EnumValues><string>Yes</string></EnumValues><TypeRe>Text</TypeRe><EnumGUIDRE>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</EnumGUIDRE></ReportRestriction><ReportRestriction><GUID>f78c5d83-d82e-425f-b381-9ab2221668a0</GUID><Type>Text</Type><DisplayName>Print Current Log File</DisplayName><DisplayOrder>4</DisplayOrder><EnumGUID>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUID><PivotPosition>Row</PivotPosition><TypeEd>Text</TypeEd><EnumGUIDEL>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUIDEL><Prompt>PromptOneValue</Prompt><OperatorStyle>NotModifiable</OperatorStyle><DisplayOrderRE>4</DisplayOrderRE><EnumValues><string>events</string></EnumValues><TypeRe>Text</TypeRe><EnumGUIDRE>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</EnumGUIDRE></ReportRestriction></InputValues><Sources><ReportSource><GUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</GUID><Name>Main</Name><Connections><MetaConnection><GUID>67ad9065-d857-463d-acf4-923dacd1c053</GUID><Name>connection</Name><ConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</ConnectionString></MetaConnection></Connections><ConnectionGUID>67ad9065-d857-463d-acf4-923dacd1c053</ConnectionGUID><IsNoSQL>true</IsNoSQL><MetaData><Enums><MetaEnum><GUID>4bcf1ccc-cb6b-446a-b6ee-0bc0ac4d2b15</GUID><Name>YesNo</Name><Values><MetaEV><Id>Yes</Id></MetaEV><MetaEV><Id>No</Id></MetaEV></Values></MetaEnum><MetaEnum><GUID>b3a1f4c6-fae8-4a84-b120-9593fb1c2b9c</GUID><Name>Repository Folders</Name></MetaEnum><MetaEnum><GUID>bcbee6c9-18d9-4eb7-bba7-76e271c8a38e</GUID><Name>Logs</Name><Values><MetaEV><Id>no</Id><Val>No Log</Val></MetaEV><MetaEV><Id>events</Id><Val>Server Events</Val></MetaEV><MetaEV><Id>schedules</Id><Val>Report Scheduler</Val></MetaEV><MetaEV><Id>executions</Id><Val>Report executions</Val></MetaEV></Values></MetaEnum></Enums></MetaData></ReportSource></Sources><Models><ReportModel><GUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</GUID><Name>Model</Name><SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID></ReportModel></Models><Tasks><ReportTask><GUID>ccb62554-63e2-4cbc-9d18-e59099cb573c</GUID><Name>Publish Repository Files</Name><CancelReport>false</CancelReport><SourceGUID>92a001bf-5000-4dfe-b5b6-d86accb65aff</SourceGUID><Script>@using System.IO&#xD;
@using FluentFTP&#xD;
@using System.Security.Authentication&#xD;
@{&#xD;
    ReportTask task = Model;&#xD;
    Report report = task.Report;&#xD;
    Repository repository = report.Repository;&#xD;
&#xD;
    //Configure the root repository destination folder:&#xD;
    var repositoryDestination = "";  // TO BE MODIFIED !&#xD;
    //repositoryDestination =@"\\wsl$\Ubuntu\seal\Repository"; //For file system (Ubuntu Sub-System)&#xD;
    //repositoryDestination = "/Repository/"; //FTP root folder&#xD;
    //repositoryDestination = "/site/wwwroot/Repository/"; //FTP root folder (e.g. for Azure)&#xD;
&#xD;
    //Uncomment and configure to deploy on a FTP Server&#xD;
    FtpClient client = null; &#xD;
    //client = new FtpClient("Host Name", "User Name", "Password"); &#xD;
    //client = new FtpClient("127.0.0.1", "tester", "password"); &#xD;
    //client = new FtpClient("waws-prod-dm1-165.ftp.azurewebsites.windows.net", @"sealcore\$sealcore", "password"); //  (e.g. for Azure)&#xD;
&#xD;
    if (client != null) {&#xD;
        //Default FTP configuration for Azure&#xD;
        client.SslProtocols = SslProtocols.Tls;&#xD;
        client.ValidateAnyCertificate = true;&#xD;
        client.DataConnectionType = FtpDataConnectionType.PASV;&#xD;
        client.DownloadDataType = FtpDataType.Binary;&#xD;
        client.RetryAttempts = 5;&#xD;
        client.SocketPollInterval = 1000;&#xD;
        client.ConnectTimeout = 2000;&#xD;
        client.ReadTimeout = 2000;&#xD;
        client.DataConnectionConnectTimeout = 2000;&#xD;
        client.DataConnectionReadTimeout = 2000;        &#xD;
        client.Port = 21;&#xD;
&#xD;
        report.LogMessage("Connecting to '{0}'", client.Host);     &#xD;
        client.Connect();&#xD;
    }&#xD;
    &#xD;
    if (string.IsNullOrEmpty(repositoryDestination)) {&#xD;
        throw new Exception("Configure the task first (Edit the 'Publish Repository Files' Task Script): Define at least the Repository Destination Folder...");&#xD;
    }&#xD;
    &#xD;
    var repositoryFolders = report.GetInputValueByName("Repository Source Folders");&#xD;
    var recursive = report.GetInputValueByName("Copy Sub-Folders").FirstStringValue == "Yes";&#xD;
    var printLog = report.GetInputValueByName("Print Current Log File").FirstStringValue;&#xD;
    &#xD;
    //Repository folders&#xD;
    var dirs = new Dictionary&lt;string, string&gt;();&#xD;
    bool reportsDone = false;&#xD;
    var dest = repositoryDestination;&#xD;
    if (!dest.EndsWith("/") || dest.EndsWith("\\")) {&#xD;
        dest += "\\";&#xD;
    }&#xD;
&#xD;
    foreach (var folder in repositoryFolders.EnumValues.ToList()) {&#xD;
        if (folder.StartsWith("ra:")) {&#xD;
            dirs.Add(repository.RepositoryPath, dest);&#xD;
            break;&#xD;
        }&#xD;
        if (folder.StartsWith("re:")) {&#xD;
            var sourcePath = folder.Substring(3);&#xD;
            var destPath = dest + Path.GetFileName(folder.Substring(3));&#xD;
            if (Path.GetFileName(destPath) == "Reports") { reportsDone = true; }&#xD;
            if (Path.GetFileName(destPath) == "Schedules") { destPath = dest + "SpecialFolders\\" + Path.GetFileName(folder.Substring(3)); }&#xD;
            dirs.Add(sourcePath, destPath);&#xD;
        }&#xD;
        else if (folder.StartsWith("rf:") &amp;&amp; !reportsDone) {&#xD;
            var sourcePath = repository.ReportsFolder + folder.Substring(3);&#xD;
            var destPath = dest + "Reports/" + folder.Substring(3);&#xD;
            dirs.Add(sourcePath, destPath);&#xD;
        }&#xD;
    }        &#xD;
&#xD;
    foreach (var sourcePath in dirs.Keys) {&#xD;
        var destPath = dirs[sourcePath];&#xD;
        &#xD;
        if (client == null) {&#xD;
            FileHelper.CopyDirectory(sourcePath, destPath, recursive, report, "*");&#xD;
        }&#xD;
        else {&#xD;
            destPath = destPath.Replace("\\","/");&#xD;
            FileHelper.FtpCopyDirectory(client, sourcePath, destPath, recursive, report);&#xD;
        }&#xD;
    } &#xD;
    &#xD;
    if (printLog != "no") {&#xD;
        report.LogMessage("REMOTE LOG FILE:\r\n");   &#xD;
&#xD;
        if (client == null) {&#xD;
            var logPath = string.Format("{0}Logs\\{2}_{1:yyyy_MM_dd}.txt", dest, DateTime.Now, printLog);&#xD;
            if (!File.Exists(logPath)) {&#xD;
                report.LogMessage("No remote log file at '{0}'...\r\n", logPath); &#xD;
            }&#xD;
            else {&#xD;
                report.LogMessage(File.ReadAllText(logPath));&#xD;
            }&#xD;
        }&#xD;
        else {&#xD;
            var logPath = string.Format("{0}Logs/{2}_{1:yyyy_MM_dd}.txt", dest.Replace("\\","/"), DateTime.Now, printLog);&#xD;
            if (!client.FileExists(logPath)) {&#xD;
                report.LogMessage("No remote log file at '{0}'...\r\n", logPath); &#xD;
            }&#xD;
            else {&#xD;
                var tempFilePath = FileHelper.GetTempUniqueFileName(printLog + ".txt");&#xD;
                client.DownloadFile(tempFilePath, logPath);&#xD;
                report.LogMessage(File.ReadAllText(tempFilePath));&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
    &#xD;
    if (client != null) { client.Disconnect(); }&#xD;
}&#xD;
</Script><SortOrder>1</SortOrder></ReportTask></Tasks><Views><ReportView><GUID>838b9ce2-7276-4af0-b250-d336eceaada0</GUID><Name>View</Name><Views><ReportView><GUID>851ad1bc-ffcb-4b2a-b249-bafcae79bdfd</GUID><Name>Model</Name><Views><ReportView><GUID>0d96e1ea-f99d-4f07-a21a-56b532716871</GUID><Name>Model Container</Name><Views><ReportView><GUID>d9fb20aa-f1e0-46d1-a1e5-97570d92d8ce</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>2860a0c6-c1c4-4599-a7c9-627e62f117bc</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>5281a22f-b471-4da4-81ba-b06e26b81c61</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>b1ea7e27-2149-41d4-8bdc-39b17f46a562</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>0ca4b344-6223-43da-8a7c-67c0ddaf3225</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>fc05615f-3ba8-4fd3-b87c-c8fbe3bd07dc</ModelGUID><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><Parameters><Parameter><Name>messages_mode</Name><Value>enabledshown</Value></Parameter></Parameters><SortOrder>1</SortOrder></ReportView></Views><InitScript>@using System.IO&#xD;
@{&#xD;
    Report report = Model;&#xD;
	ReportExecutionLog log = report;&#xD;
&#xD;
    //Check Security: To be adapted to Publish from the Web Report Server itself&#xD;
    bool allowPublication = false;&#xD;
    if (report.ExecutionContext == ReportExecutionContext.DesignerReport) {&#xD;
        allowPublication = true;&#xD;
    }&#xD;
    //Or check for a special user or group to allow execution from the Web&#xD;
    //if (report.SecurityContext != null &amp;&amp; (report.SecurityContext.BelongsToGroup("aGroupName") || report.SecurityContext.UserName = "aUserName")) {&#xD;
    //    allowPublication = true;&#xD;
    //}&#xD;
    if (!allowPublication) {&#xD;
        log.LogMessage("\r\nWARNING: This report can only be executed from the Report Designer !\r\n");&#xD;
        throw new Exception("This report can only be executed from the Report Designer");&#xD;
    }&#xD;
&#xD;
    //Script executed when the report is initialized&#xD;
    log.LogMessage("Executing Init Script");&#xD;
    &#xD;
    //Fill repository enum&#xD;
    var foldersEnum = report.Sources[0].MetaData.Enums.FirstOrDefault(i =&gt; i.Name == "Repository Folders");&#xD;
    if (foldersEnum != null &amp;&amp; foldersEnum.Values.Count == 0) {&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = "ra:", Val = "Repository: Copy All Folders" });&#xD;
        foreach (var folder in Directory.GetDirectories(report.Repository.RepositoryPath))&#xD;
        {&#xD;
            var description = "Repository Folder: " + Path.GetFileName(folder);&#xD;
            if (Path.GetFileName(folder) == "Logs" || Path.GetFileName(folder) == "SpecialFolders") { continue; }&#xD;
            if (Path.GetFileName(folder) == "Settings") { description += " (Configuration, Translations)"; }&#xD;
            if (Path.GetFileName(folder) == "Sources") { description += " (Data Sources)"; }&#xD;
            foldersEnum.Values.Add(new MetaEV() { Id = "re:" + folder, Val = description });&#xD;
        }&#xD;
        foldersEnum.Values.Add(new MetaEV() { Id = "re:" + report.Repository.RepositoryPath + "\\SpecialFolders\\Schedules", Val = "Repository Folder: Schedules" });&#xD;
        &#xD;
        List&lt;string&gt; choices = new List&lt;string&gt;();&#xD;
        FileHelper.AddFolderChoices(report.Repository.ReportsFolder, "", choices);&#xD;
        foreach (var folder in choices) {&#xD;
            foldersEnum.Values.Add(new MetaEV() { Id = "rf:" + folder, Val = "Report Folder: " + folder  });&#xD;
        }        &#xD;
    }&#xD;
}&#xD;
</InitScript><Cancel>false</Cancel></Report>