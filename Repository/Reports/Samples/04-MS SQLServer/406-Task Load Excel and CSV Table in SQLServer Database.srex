<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><GUID>cc309908-6797-4ba4-8833-a7c850af2233</GUID><ViewGUID>d5c29a44-1e4f-4962-a1de-0550bb60aaf5</ViewGUID><Sources><ReportSource><GUID>745ce0e2-a49e-45c4-a488-eedf5017a1c2</GUID><Name>Local SQLServer</Name><ConnectionGUID>4bc89c14-aa80-4051-a2cc-6201f903c98b</ConnectionGUID><MetaData><Tables><MetaTable><GUID>ab9fab1f-1c50-4154-804e-c04a2fcf7350</GUID><Alias>SealMasterTable</Alias><DynamicColumns>true</DynamicColumns></MetaTable></Tables></MetaData><MetaSourceGUID>84abac98-6722-4a0b-98a0-00c15042e0a5</MetaSourceGUID></ReportSource></Sources><Models><ReportModel><GUID>358d7529-640e-4626-b40a-957e52e9a646</GUID><Name>model</Name><SourceGUID>745ce0e2-a49e-45c4-a488-eedf5017a1c2</SourceGUID></ReportModel></Models><Tasks><ReportTask><GUID>27bcb127-6bb1-431a-a9aa-f8ff5d319473</GUID><Name>Load table</Name><CancelReport>false</CancelReport><SourceGUID>745ce0e2-a49e-45c4-a488-eedf5017a1c2</SourceGUID><SQL /><Script>@using System.Data
@using System.IO
@{
	//Load a table from an Excel file
	//When executed, the task loads the Excel sheet in a table if the file is newer that the one in load folder, 
	//The table will be created in the default database of your SQLServer connection (may be master...)&#xD;
    
	ReportTask task = Model;
	var helper = new TaskHelper(task);
	// configuration of the database helper may be changed to control the table creation and load...&#xD;
	/*
	helper.DatabaseHelper.ColumnCharType = "";
	helper.DatabaseHelper.ColumnNumericType = "";
	helper.DatabaseHelper.ColumnIntegerType = "";
	helper.DatabaseHelper.ColumnDateTimeType = "";
	
	helper.DatabaseHelper.ColumnCharLength = 400; //0 means auto-size
	helper.DatabaseHelper.InsertBurstSize = 500;
	helper.DatabaseHelper.DefaultEncoding = System.Text.Encoding.Default;
	helper.DatabaseHelper.TrimText = true;
	helper.DatabaseHelper.DebugMode = false;
	
	//Delegate samples:
	helper.DatabaseHelper.MyGetTableColumnValue = new CustomGetTableColumnValue(delegate(DataRow row, DataColumn col,string datetimeFormat)
	{
		string res = "";
		//TODO return the value
		//Check code from: res = helper.DatabaseHelper.RootGetTableColumnValue(row,col,datetimeFormat);
		return res;
	});
		
	helper.DatabaseHelper.MyLoadDataTableFromExcel = new CustomLoadDataTableFromExcel(delegate(string excelPath, string tabName, int startRow, int startCol, int endColIndex)
	{
		DataTable res = null;
		//TODO return the datatable
		return res;
	});	&#xD;
    */
	
   // public delegate string CustomGetTableCreateCommand(DataTable table);

	//List of delegates (from TaskDatabaseHelper.cs):
    //public delegate string CustomGetTableColumnNames(DataTable table);
    //public delegate string CustomGetTableColumnName(DataColumn col);
    //public delegate string CustomGetTableColumnType(DataColumn col);

    //public delegate string CustomGetTableColumnValues(DataRow row, string dateTimeFormat);
    //public delegate string CustomGetTableColumnValue(DataRow row, DataColumn col, string datetimeFormat);

    //public delegate DataTable CustomLoadDataTable(string connectionString, string sql);
    //public delegate DataTable CustomLoadDataTableFromExcel(string excelPath, string tabName = "", int startRow = 1, int startCol = 1, int endColIndex = 0);
    //public delegate DataTable CustomLoadDataTableFromCSV(string csvPath, char? separator = null);		
	&#xD;
&#xD;
    var loadFolder = Path.GetTempPath() + "loadFolder";&#xD;
    task.LogMessage("Load Folder: "+ loadFolder); &#xD;
    &#xD;
    helper.LoadTableFromExcel(
		loadFolder, //Load folder used to store the Excel file loaded and to check if a new version is available
        Path.Combine(Repository.Instance.RepositoryPath, "Databases" + Path.DirectorySeparatorChar + "databank.worldbank.org_health_population.xlsx"),&#xD;
		"Data",  //Tab name in Excel
		"org_health_population", //Name of the destination table
		false, //if true the load is done for all connections&#xD;
        1, //startRow: row of the Sheet to start &#xD;
        1, //startColumn: column of the Sheet to start &#xD;
        0 //endColumnIndex: index of the last column loaded (0 = last column not empty) 
	);&#xD;
    &#xD;
    &#xD;
	helper.LoadTableFromCSV(&#xD;
		loadFolder, //Load folder used to store the Excel file loaded and to check if a new version is available&#xD;
        Path.Combine(Repository.Instance.RepositoryPath, "Settings" + Path.DirectorySeparatorChar + "Translations.csv"),&#xD;
        "sr_translations", //Name of the destination table&#xD;
		';',  //Separator, if null the separator is auto detected&#xD;
		false, //if true the load is done for all connections&#xD;
        false //if true, use the Visual Basic Parser&#xD;
	);&#xD;
    
}</Script><SortOrder>1</SortOrder></ReportTask></Tasks><Views><ReportView><GUID>d5c29a44-1e4f-4962-a1de-0550bb60aaf5</GUID><Name>view</Name><TemplateName>Report</TemplateName><Parameters><Parameter><Name>messages_mode</Name><Value>enabledshown</Value></Parameter></Parameters><SortOrder>0</SortOrder></ReportView></Views></Report>