<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><CurrentViewGUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</CurrentViewGUID><GUID>0ef51e095206405688b9eb8f10202003</GUID><ViewGUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</ViewGUID><Sources><ReportSource><GUID>2d8d60b6-e1d3-459a-91f6-c03693ae55ea</GUID><Name>Northwind (Repository)</Name><ConnectionGUID>1</ConnectionGUID><MetaData /><MetaSourceGUID>52833575-11ae-4b7d-8b5e-0f9b29d1267a</MetaSourceGUID></ReportSource></Sources><Models><ReportModel><GUID>d826ff6e-821a-4834-aab8-d50ec18a6024</GUID><Name>model</Name><SourceGUID>2d8d60b6-e1d3-459a-91f6-c03693ae55ea</SourceGUID><FinalScript>@using System.Data&#xD;
@{&#xD;
    ReportModel model = Model;&#xD;
 	ReportExecutionLog log = model.Report;&#xD;
&#xD;
    log.LogMessage("Modifying result values with the 'Final Script'...");&#xD;
        &#xD;
    var helper = new TaskDatabaseHelper();&#xD;
    //Get the photos&#xD;
    var photos = helper.LoadDataTable(model.Connection.ConnectionType, model.Connection.FullConnectionString, "select employeeID, photo from employees");&#xD;
&#xD;
    foreach (ResultPage page in model.Pages)&#xD;
    {&#xD;
        ResultTable dataTable = page.DataTable;&#xD;
        foreach(var line in dataTable.Lines) {&#xD;
            foreach (DataRow row in photos.Rows) {&#xD;
                if (row["employeeID"].ToString() == line[0].Value.ToString()) {&#xD;
                    //Set the final value in the third cell&#xD;
                    var bytes = GetImageBytesFromOLEField((byte[]) row["photo"]);&#xD;
                    line[2].FinalValue =  "&lt;img src='data:image/bmp;base64," + Convert.ToBase64String(bytes, Base64FormattingOptions.None) + "' style='width:50px;height=50px' /&gt;";&#xD;
                    break;&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
&#xD;
&#xD;
}&#xD;
</FinalScript><Elements><ReportElement><GUID>84479e3d-bdea-4a3f-bbc0-3242cfda0de5</GUID><Name>Products.CategoryID</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>f1ca9f05-b6a3-46da-b753-68cb4056cb66</MetaColumnGUID></ReportElement></Elements><Restriction>[79ed1abf-010a-42d7-9b4b-d7157b879a56]&#xD;
AND [06a2ff61-513e-4d8d-add5-88d2eb62d401]</Restriction><Restrictions><ReportRestriction><GUID>79ed1abf-010a-42d7-9b4b-d7157b879a56</GUID><Name>Orders.OrderDate</Name><DisplayName /><Format>d</Format><PivotPosition>Row</PivotPosition><AggregateFunction>Max</AggregateFunction><TotalAggregateFunction>Max</TotalAggregateFunction><MetaColumnGUID>4a3f4d69-3781-4679-8797-f425478de0d9</MetaColumnGUID><Prompt>PromptOneValue</Prompt><Date1Keyword>Today</Date1Keyword><FormatRe>d</FormatRe></ReportRestriction><ReportRestriction><GUID>06a2ff61-513e-4d8d-add5-88d2eb62d401</GUID><Name>Products.CategoryID</Name><DisplayName /><DisplayOrder>2</DisplayOrder><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><MetaColumnGUID>f1ca9f05-b6a3-46da-b753-68cb4056cb66</MetaColumnGUID><Prompt>Prompt</Prompt><DisplayOrderRE>2</DisplayOrderRE><EnumValues><string>1</string><string>3</string><string>5</string><string>8</string></EnumValues></ReportRestriction></Restrictions></ReportModel></Models><CommonScripts><CommonScript><Name>GetImageBytesFromOLEField</Name><Script>@using System.IO&#xD;
&#xD;
@functions &#xD;
{&#xD;
    byte[] GetImageBytesFromOLEField(byte[] oleFieldBytes)&#xD;
    {&#xD;
        const string BITMAP_ID_BLOCK = "BM";&#xD;
        const string JPG_ID_BLOCK = "\u00FF\u00D8\u00FF";&#xD;
        const string PNG_ID_BLOCK = "\u0089PNG\r\n\u001a\n";&#xD;
        const string GIF_ID_BLOCK = "GIF8";&#xD;
        const string TIFF_ID_BLOCK = "II*\u0000";&#xD;
        byte[] imageBytes;&#xD;
        // Get a UTF7 Encoded string version&#xD;
        var u8 = System.Text.Encoding.UTF7;&#xD;
        string strTemp = u8.GetString(oleFieldBytes);&#xD;
        // Get the first 300 characters from the string&#xD;
        string strVTemp = strTemp.Substring(0, 300);&#xD;
        // Search for the block&#xD;
        int iPos = -1;&#xD;
        if (strVTemp.IndexOf(BITMAP_ID_BLOCK) != -1)&#xD;
            iPos = strVTemp.IndexOf(BITMAP_ID_BLOCK);&#xD;
        else if (strVTemp.IndexOf(JPG_ID_BLOCK) != -1)&#xD;
            iPos = strVTemp.IndexOf(JPG_ID_BLOCK);&#xD;
        else if (strVTemp.IndexOf(PNG_ID_BLOCK) != -1)&#xD;
            iPos = strVTemp.IndexOf(PNG_ID_BLOCK);&#xD;
        else if (strVTemp.IndexOf(GIF_ID_BLOCK) != -1)&#xD;
            iPos = strVTemp.IndexOf(GIF_ID_BLOCK);&#xD;
        else if (strVTemp.IndexOf(TIFF_ID_BLOCK) != -1)&#xD;
            iPos = strVTemp.IndexOf(TIFF_ID_BLOCK);&#xD;
        else&#xD;
            throw new Exception("Unable to determine header size for the OLE Object");&#xD;
        // From the position above get the new image&#xD;
        if (iPos == -1) {&#xD;
            throw new Exception("Unable to determine header size for the OLE Object");&#xD;
        }&#xD;
        imageBytes = new byte[oleFieldBytes.LongLength - iPos];&#xD;
        MemoryStream ms = new MemoryStream();&#xD;
        ms.Write(oleFieldBytes, iPos, oleFieldBytes.Length - iPos);&#xD;
        imageBytes = ms.ToArray();&#xD;
        ms.Close();&#xD;
        ms.Dispose();&#xD;
        return imageBytes;&#xD;
    }&#xD;
}</Script></CommonScript></CommonScripts><Views><ReportView><GUID>47088ad2-fe61-4509-9909-ccf5f5827fe9</GUID><Name>view</Name><Views><ReportView><GUID>47c62c87-49e8-40a8-bf64-a4c80562a0ec</GUID><Name>Model HTML View</Name><Views><ReportView><GUID>d5f736e5-d0dd-447b-9ff8-e3f6dbcb43f8</GUID><Name>Model Container</Name><Views><ReportView><GUID>3d58d427-f027-47f6-b399-2514c1d1ae6e</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>5fd4cf1e-24a5-49a8-8d3f-ee982d4da323</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><Parameters><Parameter><Name>chartjs_unit</Name><Value>second</Value></Parameter></Parameters><SortOrder>2</SortOrder></ReportView><ReportView><GUID>1272c3ef-b837-473b-9d1e-f128bc591ae3</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>700f6e09-f5da-4d2a-9a63-ff929d434714</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>362b1be2-611b-4d3b-bf22-b237de48f4e0</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><Parameters><Parameter><Name>columns_hidden</Name><Value>1</Value></Parameter></Parameters><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>d826ff6e-821a-4834-aab8-d50ec18a6024</ModelGUID><SortOrder>3</SortOrder></ReportView><ReportView><GUID>90d1b2de-768b-4770-b34d-7d15e8c87012</GUID><Name>Restrictions</Name><TemplateName>Restrictions</TemplateName><RestrictionsGUID><string>79ed1abf-010a-42d7-9b4b-d7157b879a56</string><string>06a2ff61-513e-4d8d-add5-88d2eb62d401</string></RestrictionsGUID><UseCustomTemplate>true</UseCustomTemplate><CustomTemplate>@using Seal.Model&#xD;
@{&#xD;
    Report report = Model;&#xD;
    ReportView view = report.CurrentView;&#xD;
}&#xD;
&#xD;
@if (report.GenerateHTMLDisplay)&#xD;
{&#xD;
&lt;form id="download_form" execguid="@report.ExecutionGUID" method="post" action="ActionUploadFile" enctype="multipart/form-data"  target_window="@view.GetValue("target_window")" style="padding-top:5px"&gt;&#xD;
    &lt;input type="hidden" name="execution_guid_trigger" id="execution_guid_trigger" value="@report.ExecutionGUID" /&gt;&#xD;
    &lt;input type="hidden" name="execution_guid" id="execution_guid" value="@report.ExecutionGUID" /&gt;&#xD;
    &lt;input type="hidden" name="navigation_id" id="navigation_id" value="@report.GetReportNavigationScriptLink()" /&gt;&#xD;
    &lt;input type="hidden" name="navigation_parameters" id="navigation_parameters"/&gt;&#xD;
    &lt;input type="hidden" name="form_id" id="form_id" value="form_@view.IdSuffix" /&gt;&#xD;
    @Include(view.GetPartialTemplateKey("Restrictions.iShared", view), view)&#xD;
&#xD;
    &lt;div style="position:relative;"&gt;&#xD;
        &lt;a class='btn btn-primary' href='javascript:;' style='margin-left: 15px;'&gt;&#xD;
            Choose File...&#xD;
            &lt;input type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;' name="file_source" size="40"  onchange='$("#upload-file-info").html($(this).val());'&gt;&#xD;
        &lt;/a&gt;&#xD;
        &amp;nbsp;&#xD;
        &lt;span class='label label-info' id="upload-file-info"&gt;&lt;/span&gt;&#xD;
    &lt;/div&gt;&#xD;
&#xD;
        &#xD;
    @if (view.ExecutionPromptedRestrictions.Exists(i =&gt; !i.TriggerExecution))&#xD;
    {&#xD;
        &lt;div class="text-right container@(report.ExecutionView.GetBoolValue("container_fluid") ? "-fluid" : "")" style="margin-top:-20px"&gt;&#xD;
            &lt;div class="row"&gt;&#xD;
                &lt;div class="col-sm-12"&gt;&#xD;
                    &lt;button id="submit_button" class="btn btn-success"&gt;Upload file and data&lt;/button&gt;&#xD;
                &lt;/div&gt;&#xD;
            &lt;/div&gt;&#xD;
        &lt;/div&gt;&#xD;
    }&#xD;
&lt;/form&gt;&#xD;
&#xD;
&lt;div id="html_div"&gt;&lt;/div&gt;&#xD;
&#xD;
&lt;script&gt;&#xD;
$(document).ready(function () {&#xD;
    $('#download_form').submit(function(e) {&#xD;
        e.preventDefault(); // stop the standard form submission&#xD;
        $.ajax({&#xD;
            url: _urlPrefix + "ActionNavigate",&#xD;
            type: this.method,&#xD;
            data: new FormData(this),&#xD;
            cache: false,&#xD;
            contentType: false,&#xD;
            processData: false,&#xD;
            success: function (data) {&#xD;
                $("#html_div").html(data);&#xD;
            },&#xD;
            error: function(xhr, error, status) {&#xD;
                console.log(error, status);&#xD;
            }&#xD;
        });&#xD;
    });&#xD;
});&#xD;
&lt;/script&gt;&#xD;
}&#xD;
</CustomTemplate><Parameters><Parameter><Name>restrictions_per_row</Name><Value>2</Value></Parameter></Parameters><SortOrder>2</SortOrder></ReportView><ReportView><GUID>4c8e18a7-9702-44a9-884d-b489ccb06183</GUID><Name>Highlights</Name><TemplateName>Free</TemplateName><UseCustomTemplate>true</UseCustomTemplate><CustomTemplate>&lt;p&gt;&#xD;
&lt;b&gt;Highlights:&lt;/b&gt;&lt;br&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;Custom 'Restrictions' views to define the input fields and button, plus event handlers.&lt;/li&gt;&#xD;
&lt;li&gt;'Report Navigation Script' in General to process the navigation: get the restriction values and the file to upload&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;b&gt;Warning: This sample will not work with .NetCore&lt;/b&gt;&#xD;
&lt;/p&gt;&#xD;
</CustomTemplate><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><SortOrder>0</SortOrder></ReportView></Views><NavigationScript>@using System.IO&#xD;
@using System.Web&#xD;
@{&#xD;
    NavigationLink link = Model;&#xD;
    Report report = link.Report;&#xD;
&#xD;
    //Script executed for a report navigation...&#xD;
    var parameters = "Parameters and Request:\r\n";&#xD;
    if (link.Parameters != null) {&#xD;
        foreach (var k in  link.Parameters.AllKeys) {&#xD;
            parameters += string.Format("Parameter {0}={1}\r\n", k, link.Parameters[k]);&#xD;
        }&#xD;
    }&#xD;
    &#xD;
    if (link.Request != null) {&#xD;
        foreach (var k in  link.Request.Form.AllKeys) {&#xD;
            parameters += string.Format("Form {0}={1}\r\n", k, link.Request.Form[k]);&#xD;
        }&#xD;
        parameters += string.Format("{0} File(s)\r\n", link.Request.Files.Count);&#xD;
    }&#xD;
    &#xD;
    var result = "";&#xD;
    //result = parameters; //uncomment to check all parameters&#xD;
    &#xD;
    //Get date value&#xD;
    var dateRestriction = report.Models[0].Restrictions.FirstOrDefault(i =&gt; i.MetaColumn.Name == "Orders.OrderDate");&#xD;
    var dateValue = "";&#xD;
    if (dateRestriction != null) {&#xD;
        dateValue = link.Request[dateRestriction.ValueHtmlId+ "_1"] + "\r\n";&#xD;
        result += "Date: " + dateValue;&#xD;
    }&#xD;
&#xD;
    //Get categories&#xD;
    var categoryRestriction = report.Models[0].Restrictions.FirstOrDefault(i =&gt; i.MetaColumn.Name == "Products.CategoryID");&#xD;
    var categoryValues = "";&#xD;
    if (categoryRestriction != null) {&#xD;
        foreach (var option in link.Request[categoryRestriction.OptionValueHtmlId].Split(',')) {&#xD;
            var val = categoryRestriction.MetaEnumValuesRE.FirstOrDefault(i =&gt; categoryRestriction.OptionHtmlId + i.HtmlId == option);&#xD;
            if (val != null) {&#xD;
                categoryValues += string.Format("{0} ({1})r\n", val.Val, val.Id);&#xD;
            }&#xD;
        }&#xD;
        result += "Category: " + categoryValues;&#xD;
    }&#xD;
    &#xD;
    if (link.Request != null &amp;&amp; link.Request.Files != null &amp;&amp; link.Request.Files.Count &gt; 0) {&#xD;
        HttpPostedFileBase file = link.Request.Files[0] as HttpPostedFileBase;&#xD;
        if (file != null &amp;&amp; !string.IsNullOrEmpty(file.FileName)) {&#xD;
            //Saving the file&#xD;
            var path = FileHelper.GetTempUniqueFileName(file.FileName);&#xD;
            file.SaveAs(path);&#xD;
            result += "File uploaded and saved in " + path;&#xD;
        }&#xD;
    }&#xD;
    &#xD;
    link.ScriptResult = result.Replace("\r\n","&lt;br&gt;");&#xD;
}&#xD;
</NavigationScript><Cancel>false</Cancel></Report>